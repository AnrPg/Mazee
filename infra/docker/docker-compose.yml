name: ${COMPOSE_PROJECT_NAME:-mazee}

services:
  postgres:
    image: postgres:16-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-mazee}-postgres
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [mazee_net]

  meilisearch:
    image: getmeili/meilisearch:v1.11
    container_name: ${COMPOSE_PROJECT_NAME:-mazee}-meili
    restart: unless-stopped
    env_file: .env
    environment:
      MEILI_ENV: development
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-dev-meili-key}
      MEILI_DB_PATH: /meili_data
      MEILI_NO_ANALYTICS: "true"
    ports:
      # expose default internal 7700; you can still change the HOST port with MEILI_PORT
      - "${MEILI_PORT:-7700}:7700"
    volumes:
      - meili_data:/meili_data
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:7700/health | grep -q '\"status\":\"available\"' || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [mazee_net]

  mongo:
    image: mongodb/mongodb-community-server:7.0-ubi8
    container_name: ${COMPOSE_PROJECT_NAME:-mazee}-mongo
    restart: unless-stopped
    env_file: .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongo_data:/data/db
      - ./mongo/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      # waits for TCP port and simple mongo handshake
      test: ["CMD", "bash", "-lc", "mongosh --quiet --eval 'db.runCommand({ ping: 1 })' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30
    networks: [mazee_net]

  api:
    build:
      context: ../../services/api
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-mazee}-api
    restart: unless-stopped
    env_file: .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      GUARDIAN_SECRET_KEY: ${GUARDIAN_SECRET_KEY}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      PHX_HOST: ${PHX_HOST}
      PORT: "4000"
      MEILI_HOST: http://meilisearch:7700
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-dev-meili-key}
      MONGO_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017
      MONGO_DB: ${MONGO_DB:-mazee}
    depends_on:
      postgres:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
      mongo:
        condition: service_healthy
    ports:
      - "4000:4000"
    networks: [mazee_net]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:4000/v1/health >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      # start_period: 50s

  # === NEW: Next.js Web (apps/web) ===
  web:
    build:
      context: ../../          # <-- repo root
      dockerfile: apps/web/Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-mazee}-web
    restart: unless-stopped
    env_file: .env
    environment:
      # Public for browser calls:
      NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-http://localhost:4000/v1}
      # Internal (server-side) calls from Next server to Phoenix in the compose network:
      INTERNAL_API_BASE_URL: http://api:4000/v1
      NODE_ENV: ${NODE_ENV:-development}
      PORT: "3000"
      HOSTNAME: "0.0.0.0"
      HOST: "0.0.0.0"         # ensure Next binds externally
      WATCHPACK_POLLING: "true"
      CHOKIDAR_USEPOLLING: "true"
      NEXT_CACHE_DIR: /app/apps/web/.next/cache
    depends_on:
      - api
    ports:
      - "3000:3000"
    networks: [mazee_net]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:3000/api/health >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      # start_period: 50s
    # ⬇️ add/keep your environment if you had any
    # env_file: .env
    # ⬇️ bind mount the repo (dev) and persist node_modules
    volumes:
      - ../../:/app
      - web_node_modules:/app/node_modules
      - web_web_node_modules:/app/apps/web/node_modules
      - web_next:/app/apps/web/.next           # ⬅️ isolate .next to a docker volume
    # ⬇️ PERMANENT fix: always install before dev
    command: >
      sh -lc "
        corepack enable &&
        corepack prepare yarn@4.10.3 --activate &&
        cd /app &&
        (yarn install --immutable || yarn install) &&
        cd /app/apps/web &&
        yarn dev -p 3000 -H 0.0.0.0
      "

networks:
  mazee_net:
    driver: bridge

volumes:
  pg_data:
  meili_data:
  mongo_data:
  web_node_modules:
  web_web_node_modules:
  web_next:
