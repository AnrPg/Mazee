posts:
  get:
    summary: Feed (personalized)
    operationId: listFeed
    tags: [Posts]
    security: [{ bearerAuth: [] }]
    parameters:
      - $ref: "../components/parameters.yaml#/limit"
      - $ref: "../components/parameters.yaml#/after"
    responses:
      "200":
        description: Feed page
        content:
          application/json:
            schema: { $ref: "../components/schemas/post/PostPage.yaml" }
  post:
    summary: Create post as current user
    tags: [Posts]
    security: [ { bearerAuth: [] } ]
    requestBody:
      required: true
      content: { application/json: { schema: { $ref: "../components/schemas/post/PostCreate.yaml" } } }
    responses:
      "201": { description: Created, content: { application/json: { schema: { $ref: "../components/schemas/post/Post.yaml" } } }, headers: { Location: { schema: { type: string } } } }


users_userId_posts:
  post:
    summary: Create post
    operationId: createPost
    tags: [Posts]
    security: [{ bearerAuth: [] }]
    parameters:
      - $ref: "../components/parameters.yaml#/userId"
    requestBody:
      required: true
      content:
        application/json:
          schema: { $ref: "../components/schemas/post/PostCreate.yaml" }
    responses:
      "201":
        description: Created
        headers:
          Location:
            schema: { type: string }
            description: URL of new resource
        content:
          application/json:
            schema: { $ref: "../components/schemas/post/Post.yaml" }
  get:
    summary: Get all posts from user
    operationId: getUserPosts
    tags: [Posts]
    parameters:
      - $ref: "../components/parameters.yaml#/userId"
    security: [{ bearerAuth: [] }]
    responses:
      "200":
        description: User"s Posts page
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "../components/schemas/post/Post.yaml"
                next:
                  type: string
                  nullable: true
      "404": { $ref: "../components/responses.yaml#/NotFound" }

posts_postId:
  get:
    summary: Get post
    operationId: getPost
    tags: [Posts]
    parameters:
      - $ref: "../components/parameters.yaml#/postId"
    security: [{ bearerAuth: [] }]
    responses:
      "200":
        description: Post
        content:
          application/json:
            schema: { $ref: "../components/schemas/post/Post.yaml" }
      "404": { $ref: "../components/responses.yaml#/NotFound" }
  delete:
    summary: Delete post
    operationId: deletePost
    tags: [Posts]
    security: [{ bearerAuth: [] }]
    parameters:
      - $ref: "../components/parameters.yaml#/postId"
    responses:
      "204": { description: Deleted }
      "403": { $ref: "../components/responses.yaml#/Forbidden" }
  put:
    summary: Replace post (author only)
    tags: [Posts]
    security: [ { bearerAuth: [] } ]
    parameters: [ $ref: "../components/parameters.yaml#/postId" ]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "../components/schemas/post/PostCreate.yaml"
              - type: object
                required: [kind]  # full replacement semantics
    responses:
      "200": { description: Replaced, content: { application/json: { schema: { $ref: "../components/schemas/post/Post.yaml" } } } }
      "403": { $ref: "../components/responses.yaml#/Forbidden" }
  patch:
    summary: Edit post (author only)
    tags: [Posts]
    security: [ { bearerAuth: [] } ]
    parameters: [ { $ref: "../components/parameters.yaml#/postId" } ]
    requestBody:
      required: true
      content: { application/json: { schema: { $ref: "../components/schemas/post/PostUpdate.yaml" } } }
    responses: { "200": { description: Updated, content: { application/json: { schema: { $ref: "../components/schemas/post/Post.yaml" } } } }, "403": { $ref: "../components/responses.yaml#/Forbidden" } }

posts_postId_like:
  post:
    summary: Like a post
    tags: [Posts]
    security: [ { bearerAuth: [] } ]
    parameters: [ { $ref: "../components/parameters.yaml#/postId" } ]
    responses: { "204": { description: Liked } }
  delete:
    summary: Remove like
    tags: [Posts]
    security: [ { bearerAuth: [] } ]
    parameters: [ { $ref: "../components/parameters.yaml#/postId" } ]
    responses: { "204": { description: Unliked } }

posts_postId_comments:
  get:
    summary: List comments
    tags: [Posts]
    parameters: [ { $ref: "../components/parameters.yaml#/postId" }, { $ref: "../components/parameters.yaml#/limit" }, { $ref: "../components/parameters.yaml#/after" } ]
    security: [ { bearerAuth: [] } ]
    responses: { "200": { description: Comments, content: { application/json: { schema: { $ref: "../components/schemas/post/CommentPage.yaml" } } } } }
  post:
    summary: Add comment
    tags: [Posts]
    security: [ { bearerAuth: [] } ]
    parameters: [ { $ref: "../components/parameters.yaml#/postId" } ]
    requestBody:
      required: true
      content: { application/json: { schema: { type: object, required: [text], properties: { text: { type: string, maxLength: 2000 } } } } }
    responses: { "201": { description: Created, content: { application/json: { schema: { $ref: "../components/schemas/post/Comment.yaml" } } } } }

posts_postId_comments_commentId:
  delete:
    summary: Delete comment
    tags: [Posts]
    security: [ { bearerAuth: [] } ]
    parameters:
      - $ref: "../components/parameters.yaml#/postId"
      - { in: path, name: commentId, required: true, schema: { $ref: "../components/schemas/primitive/ID.yaml" } }
    responses: { "204": { description: Deleted } }

reports:
  post:
    summary: Report content
    tags: [Misc]
    security: [ { bearerAuth: [] } ]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [kind, targetId, reason]
            properties:
              kind: { type: string, enum: [post, comment, profile, message] }
              targetId: { $ref: "../components/schemas/primitive/ID.yaml" }
              reason: { type: string, maxLength: 500 }
    responses: { "201": { description: Submitted } }
