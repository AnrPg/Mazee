users:
  get:
    summary: List users (admin)
    tags: [Users]
    security: [ { bearerAuth: [] } ]
    parameters: [ $ref: "../components/parameters.yaml#/limit", $ref: "../components/parameters.yaml#/after" ]
    responses:
      "200": { description: Users, content: { application/json: { schema: { $ref: "../components/schemas/user/UserPage.yaml" } } } }
      "403": { $ref: "../components/responses.yaml#/Forbidden" }
  post:
    summary: Create user (admin/import)
    tags: [Users]
    security: [ { bearerAuth: [] } ]
    requestBody:
      required: true
      content:
        application/json:
          schema: { $ref: "../components/schemas/user/UserCreate.yaml" }
    responses:
      "201": { description: Created, content: { application/json: { schema: { $ref: "../components/schemas/profile/Profile.yaml" } } } }
      "409": { $ref: "../components/responses.yaml#/Conflict" }

users_userId:
  get:
    summary: Get user (admin)
    tags: [Users]
    security: [ { bearerAuth: [] } ]
    parameters: [ $ref: "../components/parameters.yaml#/userId" ]
    responses:
      "200": { description: User, content: { application/json: { schema: { $ref: "../components/schemas/profile/Profile.yaml" } } } }
      "404": { $ref: "../components/responses.yaml#/NotFound" }
  put:
    summary: Replace user (admin)
    tags: [Users]
    security: [ { bearerAuth: [] } ]
    parameters: [ $ref: "../components/parameters.yaml#/userId" ]
    requestBody:
      required: true
      content: { application/json: { schema: { $ref: "../components/schemas/user/UserReplace.yaml" } } }
    responses:
      "200": { description: Replaced, content: { application/json: { schema: { $ref: "../components/schemas/profile/Profile.yaml" } } } }
      "412": { description: Precondition Failed (ETag) }
  patch:
    summary: Patch user (admin)
    tags: [Users]
    security: [ { bearerAuth: [] } ]
    parameters: [ $ref: "../components/parameters.yaml#/userId" ]
    requestBody:
      required: true
      content: { application/json: { schema: { $ref: "../components/schemas/profile/ProfileUpdate.yaml" } } }
    responses:
      "200": { description: Updated, content: { application/json: { schema: { $ref: "../components/schemas/profile/Profile.yaml" } } } }
  delete:
    summary: Deactivate/soft-delete user (admin)
    tags: [Users]
    security: [ { bearerAuth: [] } ]
    parameters: [ $ref: "../components/parameters.yaml#/userId" ]
    responses:
      "204": { description: Deactivated }

me:
  patch:
    summary: Update my profile (self)
    tags: [Users]
    security: [ { bearerAuth: [] } ]
    requestBody:
      required: true
      content: { application/json: { schema: { $ref: "../components/schemas/profile/ProfileUpdate.yaml" } } }
    responses:
      "200": { description: Updated, content: { application/json: { schema: { $ref: "../components/schemas/profile/Profile.yaml" } } } }

me_settings:
  get:
    summary: Get my settings
    tags: [Profiles]
    security: [ { bearerAuth: [] } ]
    responses: { "200": { description: Settings, content: { application/json: { schema: { $ref: "../components/schemas/user/UserSettings.yaml" } } } } }
  patch:
    summary: Update my settings
    tags: [Profiles]
    security: [ { bearerAuth: [] } ]
    requestBody:
      required: true
      content: { application/json: { schema: { $ref: "../components/schemas/user/UserSettings.yaml" } } }
    responses: { "200": { description: Updated, content: { application/json: { schema: { $ref: "../components/schemas/user/UserSettings.yaml" } } } } }

me_delete:
  post:
    summary: Close my account (soft-delete)
    tags: [Users]
    security: [ { bearerAuth: [] } ]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [confirm]
            properties:
              confirm: { type: string, enum: ["DELETE"] }
              reason:  { type: string, maxLength: 500 }
    responses:
      "202": { description: Scheduled for deletion }
