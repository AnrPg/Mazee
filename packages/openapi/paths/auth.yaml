auth_register:
  post:
    summary: Register with email/password
    operationId: register
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema: { $ref: "../components/schemas/auth/RegisterRequest.yaml" }
    responses:
      "201":
        description: Created
        headers:
          Set-Cookie:
            description: Session cookie (optional if using cookies)
            schema: { type: string }
        content:
          application/json:
            schema: { $ref: "../components/schemas/auth/AuthResponse.yaml" }
      "409": { $ref: "../components/responses.yaml#/Conflict" }

auth_login:
  post:
    summary: Login with email/password
    operationId: login
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema: { $ref: "../components/schemas/auth/LoginRequest.yaml" }
    responses:
      "200":
        description: Authenticated
        content:
          application/json:
            schema: { $ref: "../components/schemas/auth/AuthResponse.yaml" }
      "401": { $ref: "../components/responses.yaml#/Unauthorized" }

auth_refresh:
  post:
    summary: Refresh access token
    operationId: refreshToken
    tags: [Auth]
    security: [{ refreshToken: [] }]
    responses:
      "200":
        description: New access token
        content:
          application/json:
            schema: { $ref: "../components/schemas/auth/TokenPair.yaml" }
      "401": { $ref: "../components/responses.yaml#/Unauthorized" }

auth_logout:
  post:
    summary: Invalidate session
    operationId: logout
    tags: [Auth]
    security: [{ bearerAuth: [] }]
    responses:
      "204": { description: No Content }

auth_verify-email:
  post:
    summary: Verify email via code
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [code]
            properties: { code: { type: string } }
    responses: { "204": { description: Verified } }

auth_request-password-reset:
  post:
    summary: Send reset email
    tags: [Auth]
    requestBody:
      required: true
      content: { application/json: { schema: { type: object, required: [email], properties: { email: { format: email, type: string } } } } }
    responses: { "204": { description: Sent (always 204) } }

auth_reset-password:
  post:
    summary: Reset password with token
    tags: [Auth]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [token, newPassword]
            properties:
              token: { type: string }
              newPassword: { type: string, minLength: 8 }
    responses: { "204": { description: Updated } }

auth_sessions:
  get:
    summary: List active sessions
    tags: [Auth]
    security: [ { bearerAuth: [] } ]
    responses:
      "200":
        description: Sessions
        content: { application/json: { schema: { $ref: "../components/schemas/auth/SessionPage.yaml" } } }

auth_sessions_sessionId:
  delete:
    summary: Revoke a session (log out another device)
    tags: [Auth]
    security: [ { bearerAuth: [] } ]
    parameters: [ { in: path, name: sessionId, required: true, schema: { $ref: "../components/schemas/primitive/ID.yaml" } } ]
    responses: { "204": { description: Revoked } }

auth_push-tokens:
  post:
    summary: Register push token (FCM/APNS/Web)
    tags: [Auth]
    security: [ { bearerAuth: [] } ]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [platform, token]
            properties:
              platform: { type: string, enum: [android, ios, web] }
              token: { type: string }
    responses: { "201": { description: Registered } }

handles_check:
  get:
    summary: Check handle availability
    tags: [Profiles]
    parameters: [ { in: query, name: handle, required: true, schema: { type: string } } ]
    responses:
      "200":
        description: Availability
        content:
          application/json:
            schema:
              type: object
              properties: { available: { type: boolean }, suggestion: { type: string, nullable: true } }
