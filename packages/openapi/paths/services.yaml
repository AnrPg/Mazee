services_text:
  get:
    summary: Service text for given typikon/context
    operationId: getServiceText
    tags: [Services]
    parameters:
      - in: query
        name: typikon
        schema: { type: string, example: "Byzantine-Std" }
      - in: query
        name: saint
        schema: { type: string, example: "St George" }
      - in: query
        name: period
        schema: { type: string, example: "Lent" }
      - in: query
        name: calendar
        schema: { type: string, enum: [new, old], default: new }
    responses:
      "200":
        description: Structured service document
        content:
          application/json:
            schema: { $ref: "../components/schemas/service/ServiceDocument.yaml" }

services_plan:
  post:
    summary: Build service layout for given context (dry-run)
    tags: [Services]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              typikon: { type: string }
              saint: { type: string }
              period: { type: string }
              calendar: { type: string, enum: [new, old], default: new }
              options: { type: object, additionalProperties: true }
    responses: { "200": { description: Plan, content: { application/json: { schema: { $ref: "../components/schemas/service/ServiceDocument.yaml" } } } } }

services_chant_identify:
  post:
    summary: Identify chant from audio clip (beta)
    tags: [Services]
    requestBody:
      required: true
      content:
        application/octet-stream:
          schema: { type: string, format: binary }
    responses:
      "200":
        description: Match
        content:
          application/json:
            schema:
              type: object
              properties:
                confidence: { type: number, format: float }
                probableServicePart: { type: string }
                refs: { type: array, items: { type: string } }

hymns:
  post:
    summary: Create hymn reference
    tags: [Synaxarion]
    security: [{ bearerAuth: [] }]
    requestBody:
      required: true
      content:
        application/json:
          schema: { $ref: '../components/schemas/service/HymnRefCreate.yaml' }
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema: { $ref: '../components/schemas/service/HymnRef.yaml' }

hymns_hymnId:
  patch:
    summary: Update hymn reference
    tags: [Synaxarion]
    security: [{ bearerAuth: [] }]
    parameters:
      - { name: hymnId, in: path, required: true, schema: { type: string } }
    requestBody:
      required: true
      content:
        application/json:
          schema: { $ref: '../components/schemas/service/HymnRefUpdate.yaml' }
    responses:
      '200':
        description: Updated
        content:
          application/json:
            schema: { $ref: '../components/schemas/service/HymnRef.yaml' }
  delete:
    summary: Delete hymn reference
    tags: [Synaxarion]
    security: [{ bearerAuth: [] }]
    parameters:
      - { name: hymnId, in: path, required: true, schema: { type: string } }
    responses:
      '204': { description: Deleted }
