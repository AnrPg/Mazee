name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  detect:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.probe.outputs.web }}
      api: ${{ steps.probe.outputs.api }}
      android: ${{ steps.probe.outputs.android }}
    steps:
      - uses: actions/checkout@v4
      - id: probe
        run: |
          echo "web=$([ -f apps/web/package.json ] && echo true || echo false)" >> "$GITHUB_OUTPUT"
          echo "api=$([ -f services/api/mix.exs ] && echo true || echo false)" >> "$GITHUB_OUTPUT"
          echo "android=$([ -f apps/android/gradlew ] && echo true || echo false)" >> "$GITHUB_OUTPUT"

  web:
    needs: detect
    if: ${{ needs.detect.outputs.web == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: corepack enable && corepack prepare yarn@4.10.3 --activate

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # Build toolchain for native deps (sharp, napi-rs, etc.)
      - name: System build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 make g++ pkg-config

      # Rust for napi-rs packages (e.g., unrs-resolver)
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Slightly more robust networking during fetch
      - name: Yarn network tuning
        run: |
          yarn config set httpTimeout 600000
          yarn config set networkConcurrency 1
        env:
          NODE_OPTIONS: --dns-result-order=ipv4first

      # Cache Yarn Berry artifacts
      - name: Cache Yarn
        uses: actions/cache@v4
        with:
          path: |
            .yarn/cache
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # Install from monorepo root, then focus web
      - name: Install (root) + focus web
        env:
          NODE_OPTIONS: --dns-result-order=ipv4first
        run: |
          yarn install --immutable
          yarn workspaces focus apps/web --all

      - name: Lint
        working-directory: apps/web
        run: |
          set -euo pipefail
          if ! find . -type f \( -name '*.ts' -o -name '*.tsx' -o -name '*.js' -o -name '*.jsx' -o -name '*.cjs' -o -name '*.mjs' \) | grep -q .; then
            echo "No JS/TS files under apps/web — skipping ESLint."
            exit 0
          fi
          yarn eslint "app/**/*.{ts,tsx,js,jsx}" "pages/**/*.{ts,tsx,js,jsx}" "src/**/*.{ts,tsx,js,jsx}" "components/**/*.{ts,tsx,js,jsx}" --no-error-on-unmatched-pattern --max-warnings 0


      - name: Typecheck
        working-directory: .
        run: |
          set -euo pipefail
          if [ -f apps/web/tsconfig.json ]; then
            yarn tsc -p apps/web/tsconfig.json --noEmit
          elif [ -f tsconfig.json ]; then
            yarn tsc -p tsconfig.json --noEmit
          else
            echo "No tsconfig.json found — skipping typecheck."
            exit 0
          fi


      - name: Prettier check
        working-directory: apps/web
        run: yarn prettier --write .

      - name: Export web dependencies
        if: ${{ always() }}
        run: |
          mkdir -p artifacts
          (cd apps/web && yarn list --all) > artifacts/web-deps.txt || true

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: deps-web
          path: artifacts/web-deps.txt
          if-no-files-found: ignore



  api:
    needs: detect
    if: ${{ needs.detect.outputs.api == 'true' }}
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:16
        env:
          POSTGRES_USER: koin
          POSTGRES_PASSWORD: koinpass
          POSTGRES_DB: mazee_test
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U koin"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=12
    steps:
      - uses: actions/checkout@v4
      - uses: erlef/setup-beam@v1
        with:
          otp-version: '26'
          elixir-version: '1.16.3'
      - run: mix local.hex --force && mix local.rebar --force
      - name: Deps
        working-directory: services/api
        run: mix deps.get
      - name: Format check
        working-directory: services/api
        run: mix format --check-formatted
      - name: Credo
        working-directory: services/api
        run: mix credo --strict || echo "Credo not configured yet."
      - name: DB setup
        working-directory: services/api
        env:
          POSTGRES_USER: koin
          POSTGRES_PASSWORD: koinpass
          POSTGRES_DB: mazee_test
          POSTGRES_HOST: 127.0.0.1
          POSTGRES_PORT: 5432
        run: mix ecto.create && mix ecto.migrate || echo "Ecto not configured yet."
      - name: Tests
        working-directory: services/api
        run: mix test || echo "No tests yet."
      - name: Dialyzer
        working-directory: services/api
        run: mix dialyzer || echo "Dialyzer cache not built yet."
      - name: Export elixir dependencies
        if: ${{ always() }}
        run: |
          mkdir -p artifacts
          (cd services/api && mix deps.tree) > artifacts/elixir-deps.txt || true
          (cd services/api && mix hex.outdated --all) > artifacts/elixir-outdated.txt || true
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: deps-elixir
          path: |
            artifacts/elixir-deps.txt
            artifacts/elixir-outdated.txt
          if-no-files-found: ignore

  android:
    needs: detect
    if: ${{ needs.detect.outputs.android == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: ktlint
        working-directory: apps/android
        run: ./gradlew ktlintCheck || echo "ktlint not configured."
      - name: detekt
        working-directory: apps/android
        run: ./gradlew detekt || echo "detekt not configured."
      - name: Export android dependencies
        if: ${{ always() }}
        run: |
          mkdir -p artifacts
          (cd apps/android && ./gradlew :app:dependencies) > artifacts/android-deps.txt || true
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: deps-android
          path: artifacts/android-deps.txt
          if-no-files-found: ignore
